
前期准备：需要有一个ubuntu22.04虚拟机环境、安装docker、安装kubectl、安装minikube、安装make、安装git、安装语言包（我这里是golang）、安装docker-compose


1、使用 make 命令将代码编译成二进制文件


2、继续使用 make 命令将我们刚才编译好的二进制文件打包到制定的 docker 镜像中，并且将这个镜像推送到自己的阿里云镜像仓库中


3、还是使用 make 命令将刚才推送到仓库的镜像部署到 minikube 集群中指定的 namespace 中

在minikube中创建自己的namespace
kubectl create ns xiaoyin

查看minikube中的namespace
kubectl get ns

将刚才创建的namespace设置为默认的
kubectl config set-context --current --namespace=xiaoyin

然后开始部署，在部署的时候如果拉取的是私有仓库的镜像，如果没有访问的权限，还需要先让集群能够有访问权限
这个存在于某个命名空间下的
kubectl create secret docker-registry ali-image-secret \
  --docker-server=registry.cn-shanghai.aliyuncs.com \
  --docker-username=YOUR_USERNAME \
  --docker-password=YOUR_PASSWORD \
  --namespace=xiaoyin

正式部署
kubectl apply -f deploy/testapp-deploy.yaml


4、使用命令部署一个server，然后集群内部的pod中运行的程序，能够互相通讯
kubectl apply -f deploy/gate/gate-service.yaml

5、在集群中部署MongoDB、Redis、MySQL并在程序中进行增删改查的测试
TODO 这里需要了解k8s中的持久化存储（持久卷），分为与pod生命周期相同的、与集群声明周期相关的
https://juejin.cn/post/7222804347830353981
Kubernetes中的持久卷（PV）的生命周期并不总是与集群的生命周期完全一致。PV是由集群管理员提前预置的，并且其生命周期通常超越任何单一的Pod。
当一个PV被创建，它就被集群期望会一直存在，直到管理员人工删除该PV。这意味着，即使Pod重启或者被重新调度到其它节点上，只要PV仍然存在，那么存储在PV上的数据就是安全的。
然而，如果整个Kubernetes集群出现问题，例如主节点故障，或者存储系统出现异常，可能会影响到PV的正常使用，进而可能影响存储在PV上的数据。
为此，通常需要进行一些备份和恢复策略，如定期将PV数据备份到远程存储，以防止数据丢失
https://www.cnblogs.com/kevingrace/p/14501472.html
https://www.lixueduan.com/posts/kubernetes/14-pv-dynamic-provision-process/

关于Redis也再深入的了解一下，有必要去看看Redis的源码
https://redis.uptrace.dev/zh/


6、外部将请求打到集群内部指定的pod中，然后pod中的程序将请求转发到指定的服务中














