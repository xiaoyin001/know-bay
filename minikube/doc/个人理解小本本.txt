

1、首先需要明白我们用k8s干什么
    通俗来讲，k8s可以理解为一个集群管理员，这个管理员有一些技能，我根据给这个管理发送指令，管理员将我们的指令转换其可用的技能，进行管理集群中的资源。

2、k8s中的核心概念 -- Pod
    这就是k8s的技能之一，我们想要将docker的镜像跑起来，根我们直接操作docker一样，我们只需要给k8s管理员发送指令，我要使用那个镜像在镜像中执行什么指令，
    我们配的yaml就是我们对这个管理员说的内容，管理员接收到我们的需求后会执行一些列的操作。
    总结：可以将pod理解为一台机器，我们需要在这个机上运行什么程序。

3、k8s中的核心概念 -- Service
    这个是k8s的另一个技能，我们想要在集群内部访问到某个指定的Pod，用最原始的想法就是拿到这个Pod的IP然后进行访问，但是Pod的IP不是固定的，
    每次启动集群都会分配给这个Pod新的IP，这样用起来就非常的难受，为了解决这个问题就有了Service，Service就不需要知道IP，我们想要访问Service只需要知道它的名字即可，
    但我们的最终目的不是访问Service而是Pod。
    这里我们将Pod理解为一套房子，IP就是这套房子的房东，Service理解为中介，我们想要买这个房子可以直接找房东（IP）也可以找中介（Service），但是找房东很难，房东也可能会变换，
    所以我们就可以直接找中介，告诉中介我们就认准这套房子（Pod），房东是谁我不关注，我想要跟房东沟通的事情，中介都会帮我转达。
    同样启动一个Service和启动一个Pod一样，就需要跟管理员讲，这是那个中介（Service）对应那个房子（Pod），他们通过什么方式（端口）联系。
    注意：一般Service只对应一个相同名字的Pod，至于启动多少个相同名字的Pod这边不是那么关注
    总结：Pod1将消息发送到Service，Service会将消息根据yaml配置的规则转发到指定的Pod2，这样就达到了Pod1和Pod2通信的目的。

4、了解 kubectl 和 k8s 的关系
    kubectl可以理解为我们和k8s之间的翻译，k8s有自己的方言我们不懂，我们也有自己的方言，k8s也不懂，这时候刚好有一个翻译懂我们双方的方言，这个翻译就是kubectl，
    我们不用深刻理解kubectl和k8s的关系，只需要知道kubectl是k8s的翻译即可，我们想要和k8s沟通，只需要通过kubectl即可。
    总结：kubectl就是将我们给其的指令转换成 k8s的API请求，然后k8s根据API请求执行对应的操作。






